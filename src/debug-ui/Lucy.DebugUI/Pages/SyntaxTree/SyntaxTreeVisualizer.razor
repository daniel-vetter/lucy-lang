@using System.Collections.Immutable
@using Lucy.DebugUI.Services

<TreeView RootNodes="_treeNodes"></TreeView>

@code {

    ImmutableArray<ITreeViewNode> _treeNodes = ImmutableArray<ITreeViewNode>.Empty;

    [Parameter] public SyntaxNode? RootNode { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ShowTree(RootNode);
    }

    public void ShowTree(SyntaxNode? node)
    {
        if (node == null)
        {
            _treeNodes = ImmutableArray<ITreeViewNode>.Empty;
            return;
        }

        var treeViewNode = Convert(node);
        treeViewNode.Expanded = true;
        _treeNodes = ImmutableArray.Create<ITreeViewNode>(treeViewNode);
    }

    private TreeViewNode Convert(SyntaxNode node)
    {
        var n = new TreeViewNode();
        Add(node, n);
        return n;
    }

    private void Add(Node sourceNode, TreeViewNode targetNode)
    {
        if (sourceNode is SyntaxNode syntaxNode)
        {
            targetNode.Elements.Add(new TreeViewNodeElement(syntaxNode.Name, GetColor(syntaxNode)));
            foreach (var childNodeReference in syntaxNode.ChildNodes)
            {
                var newTreeViewNode = new TreeViewNode(childNodeReference.Name + ": ");
                Add(childNodeReference.Node, newTreeViewNode);
                targetNode.ChildNodes.Add(newTreeViewNode);
            }
        }

        if(sourceNode is TokenNode tokenNode)
        {
            targetNode.Elements.Add(new TreeViewNodeElement(tokenNode.Value, GetColor(tokenNode)));
        }

        targetNode.Elements.Add(new TreeViewNodeElement(sourceNode.Range, opacity: 0.5, fontStyle: "italic"));
    }

    private string? GetColor(Node node)
    {
        return node switch
        {
            StatementSyntaxNode => "#fa00ff",
            ExpressionSyntaxNode => "#80da58",
            TokenNode => "#008bff",
            _ => null
        };
    }
}
