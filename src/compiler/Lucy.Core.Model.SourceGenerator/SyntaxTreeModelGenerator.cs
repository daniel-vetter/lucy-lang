using Microsoft.CodeAnalysis;
using System.Text;

namespace Lucy.Core.Model.SourceGenerator;

internal static class SyntaxTreeModelGenerator
{
    internal static void Generate(SourceProductionContext productionContext, Config config)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Collections.Immutable;");
        sb.AppendLine();
        sb.AppendLine("namespace " + config.Namespace + ";");
        sb.AppendLine();

        foreach (var node in config.Nodes)
        {
            var basedOn = new List<string>();
            if (node.BasedOn != null)
                basedOn.Add(node.BasedOn);
            if (node.IsRoot)
                basedOn.Add("IHashable");
            basedOn.Add("IEquatable<" + node.Name + "?>");

            sb.AppendLine($"public {(node.IsTopMost ? "" : "abstract ")}class {node.Name} : " + string.Join(", ", basedOn));
            sb.AppendLine("{");
            sb.WriteConstructor(node);
            sb.WriteProperties(node);
            sb.WriteMemberVariables(node);
            sb.WriteGetChildNodesMethod(node);
            sb.WriteHashBuilder(node);
            sb.WriteEqualsMethods(node);
            sb.AppendLine("}");
            sb.AppendLine();
        }

        productionContext.AddSource("SyntaxTreeModel.g.cs", sb.ToString());
    }

    private static void WriteEqualsMethods(this StringBuilder sb, Node node)
    {

        sb.AppendLine("    public bool Equals(" + node.Name + "? other)");
        sb.AppendLine("    {");
        sb.AppendLine("        return other is not null && _hash.AsSpan().SequenceEqual(other._hash);");
        sb.AppendLine("    }");
        sb.AppendLine();

        if (node.IsRoot)
        {
            sb.AppendLine("    public override bool Equals(object? obj)");
            sb.AppendLine("    {");
            sb.AppendLine($"        return Equals(obj as {node.Name});");
            sb.AppendLine("    }");
            sb.AppendLine();

            sb.AppendLine("    public override int GetHashCode()");
            sb.AppendLine("    {");
            sb.AppendLine("        return _hashShort;");
            sb.AppendLine("    }");
            sb.AppendLine();
        }
    }

    private static void WriteMemberVariables(this StringBuilder sb, Node node)
    {
        if (!node.IsRoot)
            return;

        sb.AppendLine("    protected NodeId _nodeId;");
        sb.AppendLine("    protected byte[] _hash = null!;");
        sb.AppendLine("    protected int _hashShort;");
        sb.AppendLine("    protected ImmutableArray<SyntaxTreeNode> _childNodes;");
        sb.AppendLine();
    }

    private static void WriteHashBuilder(this StringBuilder sb, Node node)
    {
        if (node.IsRoot)
        {
            sb.AppendLine("    public byte[] GetFullHash()");
            sb.AppendLine("    {");
            sb.AppendLine("        return _hash;");
            sb.AppendLine("    }");
            sb.AppendLine();
        }
        
        if (node.IsTopMost)
        {
            sb.AppendLine("    private void EnsureHashIsBuild()");
            sb.AppendLine("    {");
            sb.AppendLine("        using var b = new HashBuilder();");
            sb.AppendLine("        b.Add(" + node.Index + ");");
            sb.AppendLine("        b.Add(_nodeId);");
            foreach (var property in node.AllProperties)
            {
                if (property.IsOptional)
                {
                    sb.AppendLine("        if (" + property.Name + " == null)");
                    sb.AppendLine("            b.AddNull();");
                    sb.AppendLine("        else");
                    sb.AppendLine("        {");
                    if (property.IsList)
                    {
                        sb.AppendLine("            b.BeginList();");
                        sb.AppendLine("            foreach(var entry in " + property.Name + ")");
                        sb.AppendLine("                b.Add(entry);");
                    }
                    else
                        sb.AppendLine("            b.Add(" + property.Name + ");");
                    sb.AppendLine("        }");
                }
                else
                {
                    if (property.IsList)
                    {
                        sb.AppendLine("        b.BeginList();");
                        sb.AppendLine("        foreach(var entry in " + property.Name + ")");
                        sb.AppendLine("            b.Add(entry);");
                    }
                    else
                        sb.AppendLine("        b.Add(" + property.Name + ");");
                }
            }
            sb.AppendLine("        _hash = b.Build();");
            sb.AppendLine("        var hc = new HashCode();");
            sb.AppendLine("        hc.AddBytes(_hash);");
            sb.AppendLine("        _hashShort = hc.ToHashCode();");
            sb.AppendLine("    }");
            sb.AppendLine();
        }
    }

    private static void WriteConstructor(this StringBuilder sb, Node node)
    {
        var allParameters = node.AllProperties
            .Select(x => $"{GetRealType(x)} {ToLower(x.Name)}")
            .Prepend("INodeId<"+node.Name+">" + " nodeId").ToArray()
            .ToArray();

        var baseParameters = node.BaseProperties
        .Select(x => ToLower(x.Name))
        .ToArray();

        if (!node.IsRoot)
            baseParameters = baseParameters.Prepend("nodeId").ToArray();

        var paramStr = string.Join(", ", allParameters);
        var baseStr = string.Join(", ", baseParameters);

        sb.AppendLine($"    public {node.Name}({paramStr}) : base(" + baseStr + ")");
        sb.AppendLine("    {");
        if (node.IsRoot)
            sb.AppendLine("        _nodeId = (NodeId)nodeId;");
        foreach (var prop in node.Properties)
        {
            sb.AppendLine($"        {prop.Name} = {ToLower(prop.Name)};");
        }

        if (node.IsTopMost)
        {
            sb.AppendLine("        EnsureHashIsBuild();");
            sb.AppendLine("        EnsureChildNodeListIsBuild();");
        }
            
        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static string ToLower(string value)
    {
        return value.Substring(0, 1).ToLowerInvariant() + value.Substring(1);
    }

    private static string GetRealType(NodeProperty property)
    {
        var name = property.Type;
        
        if (property.IsList)
            name = "ImmutableArray<" + name + ">";

        if (property.IsOptional)
            name += "?";

        return name;
    }

    private static void WriteProperties(this StringBuilder sb, Node node)
    {
        sb.AppendLine($"    public {(node.IsRoot ? "" : "new")} INodeId<{node.Name}> NodeId => (INodeId<{node.Name}>)_nodeId;");
        foreach (var prop in node.Properties)
        {
            sb.AppendLine($"    public {GetRealType(prop)} {prop.Name} {{ get; }}");
        }

        sb.AppendLine();
    }

    private static void WriteGetChildNodesMethod(this StringBuilder sb, Node node)
    {
        if (node.IsRoot)
        {
            sb.AppendLine("    public ImmutableArray<SyntaxTreeNode> GetChildNodes() => _childNodes;");
        }

        if (node.IsTopMost)
        {
            sb.AppendLine("    private void EnsureChildNodeListIsBuild()");
            sb.AppendLine("    {");
            sb.AppendLine("        var nodes = ImmutableArray.CreateBuilder<SyntaxTreeNode>();");
            int count = 0;
            foreach (var prop in node.Properties.Where(x => x.TypeIsNode))
            {
                var padding = "        ";
                if (prop.IsList)
                {
                    sb.AppendLine(padding + "foreach (var entry in " + prop.Name + ")");
                    padding += "    ";
                }

                if (prop.IsOptional)
                {
                    sb.AppendLine(padding + "if (" + prop.Name + " != null)");
                    padding += "    ";

                }

                sb.AppendLine(padding + "nodes.Add(" + (prop.IsList ? "entry" : prop.Name) + ");");
                count++;
            }

            sb.AppendLine("        _childNodes = nodes.ToImmutable();");
            sb.AppendLine("    }");
        }
        sb.AppendLine();
    }
}