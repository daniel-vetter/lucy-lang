using Microsoft.CodeAnalysis;
using System.Text;

namespace Lucy.Core.Model.SourceGenerator;

internal static class SyntaxTreeModelGenerator
{
    internal static void Generate(SourceProductionContext productionContext, Config config)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Collections.Immutable;");
        sb.AppendLine();
        sb.AppendLine("namespace " + config.Namespace + ";");
        sb.AppendLine();

        foreach (var node in config.Nodes)
        {
            var basedOn = new List<string>();
            if (node.BasedOn != null)
                basedOn.Add(node.BasedOn);

            sb.AppendLine($"public {(node.IsTopMost ? "" : "abstract ")}class {node.Name} {(basedOn.Count > 0 ? ": " + string.Join(", ", basedOn) : "")}");
            sb.AppendLine("{");
            sb.WriteConstructor(node);
            sb.WriteCreateMethod(node);
            sb.WriteProperties(node);
            sb.WriteMemberVariables(node);
            sb.WriteGetChildNodesMethod(node);
            sb.WriteSetIdMethod(node);
            sb.AppendLine("}");
            sb.AppendLine();
        }

        productionContext.AddSource("SyntaxTreeModel.g.cs", sb.ToString());
    }

    private static void WriteSetIdMethod(this StringBuilder sb, Node node)
    {
        if (node.IsRoot)
        {
            sb.AppendLine("    public abstract void AssignNewNodeId(string documentPath);");
            sb.AppendLine();
            sb.AppendLine("    public void AssignExistingNodeId(INodeId<SyntaxTreeNode> id)");
            sb.AppendLine("    {");
            sb.AppendLine("        if (_nodeId != null)");
            sb.AppendLine("            throw new Exception(\"Node already has a id\");");
            sb.AppendLine("        _nodeId = (NodeId)id;");
            sb.AppendLine("    }");
            sb.AppendLine();
        }
        if (node.IsTopMost)
        {
            sb.AppendLine("    public override void AssignNewNodeId(string documentPath)");
            sb.AppendLine("    {");
            sb.AppendLine("        if (_nodeId != null)");
            sb.AppendLine("            throw new Exception(\"Node already has a id\");");
            sb.AppendLine($"        _nodeId = new NodeId<{node.Name}>(documentPath);");
            sb.AppendLine("    }");
            sb.AppendLine();
        }
    }

    private static void WriteMemberVariables(this StringBuilder sb, Node node)
    {
        if (!node.IsRoot)
            return;

        sb.AppendLine("    protected NodeId? _nodeId;");
        sb.AppendLine("    protected ImmutableArray<SyntaxTreeNode> _childNodes;");
        sb.AppendLine();
    }
    
    private static void WriteConstructor(this StringBuilder sb, Node node)
    {
        var allParameters = node.AllProperties
            .Select(x => $"{GetRealType(x)} {ToLower(x.Name)}")
            .Prepend("INodeId<" + node.Name + ">?" + " nodeId").ToArray()
            .ToArray();

        var baseParameters = node.BaseProperties
            .Select(x => ToLower(x.Name))
            .ToArray();

        if (!node.IsRoot)
            baseParameters = baseParameters.Prepend("nodeId").ToArray();

        var paramStr = string.Join(", ", allParameters);
        var baseStr = string.Join(", ", baseParameters);

        sb.AppendLine($"    public {node.Name}({paramStr}) : base(" + baseStr + ")");
        sb.AppendLine("    {");
        if (node.IsRoot)
            sb.AppendLine("        _nodeId = (NodeId?)nodeId;");
        foreach (var prop in node.Properties)
        {
            sb.AppendLine($"        {prop.Name} = {ToLower(prop.Name)};");
        }

        if (node.IsTopMost)
        {
            sb.AppendLine("        EnsureChildNodeListIsBuild();");
        }

        sb.AppendLine("    }");
        sb.AppendLine();
    }

    private static void WriteCreateMethod(this StringBuilder sb, Node node)
    {
        if (!node.IsTopMost)
            return;

        var props = new List<string>();
        var values = new List<string>();
        foreach(var prop in node.AllProperties)
        {
            if (prop.Init == null)
            {
                props.Add($"{GetRealType(prop)} {ToLower(prop.Name)}");
            }

            values.Add(prop.Init == null ? ToLower(prop.Name) : prop.Init.Replace("TNodeType", node.Name));
        }

        var propsStr = string.Join(", ", props);
        var valuesStr = string.Join(", ", values);

        sb.AppendLine($"    public static {node.Name} Create({propsStr})");
        sb.AppendLine("    {");
        sb.AppendLine($"        return new {node.Name}(null, {valuesStr});");
        sb.AppendLine("    }");
    }

    private static string ToLower(string value)
    {
        return value.Substring(0, 1).ToLowerInvariant() + value.Substring(1);
    }

    private static string GetRealType(NodeProperty property)
    {
        var name = property.Type;

        if (property.IsList)
            name = "ImmutableArray<" + name + ">";

        if (property.IsOptional)
            name += "?";

        return name;
    }

    private static void WriteProperties(this StringBuilder sb, Node node)
    {
        sb.AppendLine($"    public {(node.IsRoot ? "" : "new")} INodeId<{node.Name}> NodeId => (INodeId<{node.Name}>)_nodeId!;");
        foreach (var prop in node.Properties)
        {
            sb.AppendLine($"    public {GetRealType(prop)} {prop.Name} {{ get; }}");
        }

        sb.AppendLine();
    }

    private static void WriteGetChildNodesMethod(this StringBuilder sb, Node node)
    {
        if (node.IsRoot)
        {
            sb.AppendLine("    public ImmutableArray<SyntaxTreeNode> GetChildNodes() => _childNodes;");
        }

        if (node.IsTopMost)
        {
            sb.AppendLine("    private void EnsureChildNodeListIsBuild()");
            sb.AppendLine("    {");
            sb.AppendLine("        var nodes = ImmutableArray.CreateBuilder<SyntaxTreeNode>();");
            
            foreach (var prop in node.Properties.Where(x => x.TypeIsNode))
            {
                var padding = "        ";
                if (prop.IsList)
                {
                    sb.AppendLine(padding + "foreach (var entry in " + prop.Name + ")");
                    padding += "    ";
                }

                if (prop.IsOptional)
                {
                    sb.AppendLine(padding + "if (" + prop.Name + " != null)");
                    padding += "    ";

                }

                sb.AppendLine(padding + "nodes.Add(" + (prop.IsList ? "entry" : prop.Name) + ");");
            }

            sb.AppendLine("        _childNodes = nodes.ToImmutable();");
            sb.AppendLine("    }");
        }
        sb.AppendLine();
    }
}