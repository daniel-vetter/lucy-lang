<Model namespace="Lucy.Core.Model">

	<StatementSyntaxNode basedOn="SyntaxTreeNode" />
	<ExpressionSyntaxNode basedOn="SyntaxTreeNode" />

	<MissingExpressionSyntaxNode basedOn="ExpressionSyntaxNode" />

	<SyntaxTreeNode>
		<SyntaxErrors type="string" list="true" init="ImmutableArray&lt;string&gt;.Empty" />
	</SyntaxTreeNode>
	
	<TokenNode basedOn="SyntaxTreeNode">
		<Text type="string" />
		<TrailingTrivia type="string" optional="true" />
	</TokenNode>

	<UnknownTokenStatementSyntaxNode basedOn="StatementSyntaxNode">
		<Token type="TokenNode" />
	</UnknownTokenStatementSyntaxNode>
	
	<StatementListSyntaxNode basedOn="StatementSyntaxNode">
		<BlockStart type="TokenNode" optional="true" />
		<Statements type="StatementSyntaxNode" list="true" />
		<BlockEnd type="TokenNode"  optional="true" />
	</StatementListSyntaxNode>

	<ExpressionStatementSyntaxNode basedOn="StatementSyntaxNode">
		<Expression type="ExpressionSyntaxNode" />
	</ExpressionStatementSyntaxNode>

	<VariableDeclarationStatementSyntaxNode basedOn="StatementSyntaxNode">
		<VarKeyword type="TokenNode" />
		<VariableDefinition type="VariableDefinitionSyntaxNode" />
		<EqualSign type="TokenNode" />
		<Expression type="ExpressionSyntaxNode" />
	</VariableDeclarationStatementSyntaxNode>

	<ImportStatementSyntaxNode basedOn="StatementSyntaxNode">
		<ImportKeyword type="TokenNode" />
		<Path type="StringConstantExpressionSyntaxNode" />
	</ImportStatementSyntaxNode>

	<StringConstantExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Value type="string" />
		<Str type="TokenNode" />
	</StringConstantExpressionSyntaxNode>

	<NumberConstantExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Value type="double" />
		<Token type="TokenNode" />
	</NumberConstantExpressionSyntaxNode>

	<TypeAnnotationSyntaxNode basedOn="SyntaxTreeNode">
		<Seperator type="TokenNode" />
		<TypeReference type="TypeReferenceSyntaxNode" />
	</TypeAnnotationSyntaxNode>

	<TypeReferenceSyntaxNode basedOn="SyntaxTreeNode">
		<TypeName type="TokenNode" />
	</TypeReferenceSyntaxNode>

	<VariableDefinitionSyntaxNode basedOn="SyntaxTreeNode">
		<VariableName type="TokenNode" />
		<VariableType type="TypeAnnotationSyntaxNode" optional="true" />
	</VariableDefinitionSyntaxNode>

	<FunctionDeclarationStatementSyntaxNode basedOn="StatementSyntaxNode">
		<Modifiers type="TokenNode" list="true" />
		<ExternLibraryName type="StringConstantExpressionSyntaxNode" optional="true" />
		<ExternFunctionName type="StringConstantExpressionSyntaxNode" optional="true" />
		<FunKeyword type="TokenNode" />
		<FunctionName type="TokenNode" />
		<OpenBraket type="TokenNode" />
		<ParameterList type="FunctionDeclarationParameterSyntaxNode" list="true" />
		<CloseBraket type="TokenNode" />
		<ReturnType type="TypeAnnotationSyntaxNode" />
		<Body type="StatementListSyntaxNode" optional="true" />
	</FunctionDeclarationStatementSyntaxNode>

	<FunctionDeclarationParameterSyntaxNode basedOn="SyntaxTreeNode">
		<VariableDefinition type="VariableDefinitionSyntaxNode" />
		<Seperator type="TokenNode" optional="true" />
	</FunctionDeclarationParameterSyntaxNode>

	<FunctionCallExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<FunctionName type="TokenNode" />
		<OpenBraket type="TokenNode" />
		<ArgumentList type="FunctionCallArgumentSyntaxNode" list="true" />
		<CloseBraket type="TokenNode" />
	</FunctionCallExpressionSyntaxNode>

	<FunctionCallArgumentSyntaxNode basedOn="SyntaxTreeNode">
		<Expression type="ExpressionSyntaxNode" />
		<Seperator type="TokenNode" optional="true" />
	</FunctionCallArgumentSyntaxNode>

	<AdditionExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Left type="ExpressionSyntaxNode" />
		<PlusToken type="TokenNode" />
		<Right type="ExpressionSyntaxNode" />
	</AdditionExpressionSyntaxNode>

	<AndExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Left type="ExpressionSyntaxNode" />
		<AndToken type="TokenNode" />
		<Right type="ExpressionSyntaxNode" />
	</AndExpressionSyntaxNode>

	<OrExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Left type="ExpressionSyntaxNode" />
		<OrToken type="TokenNode" />
		<Right type="ExpressionSyntaxNode" />
	</OrExpressionSyntaxNode>

	<IfExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Condition type="ExpressionSyntaxNode" />
		<IfToken type="TokenNode" />
		<ThenExpression type="ExpressionSyntaxNode" />
		<ElseToken type="TokenNode" />
		<ElseExpression type="ExpressionSyntaxNode" />
	</IfExpressionSyntaxNode>

	<MemberAccessExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Target type="ExpressionSyntaxNode" />
		<DotToken type="TokenNode" />
		<MemberToken type="TokenNode" />
	</MemberAccessExpressionSyntaxNode>

	<DocumentRootSyntaxNode basedOn="SyntaxTreeNode">
		<DocumentStart type="TokenNode"></DocumentStart>
		<StatementList type="StatementListSyntaxNode" />
	</DocumentRootSyntaxNode>

	<VariableReferenceExpressionSyntaxNode basedOn="ExpressionSyntaxNode">
		<Token type="TokenNode" />
	</VariableReferenceExpressionSyntaxNode>
</Model>



