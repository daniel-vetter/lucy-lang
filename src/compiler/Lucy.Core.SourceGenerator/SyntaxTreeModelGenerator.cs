using Microsoft.CodeAnalysis;
using System.Text;

namespace Lucy.Core.SourceGenerator
{
    [Generator]
    public class SyntaxTreeModelGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var files = context.AdditionalTextsProvider
                .Where(a => a.Path.EndsWith("model.xml"))
                .Select((a, c) => (name: Path.GetFileNameWithoutExtension(a.Path), content: a.GetText(c)!.ToString()));

            var compilationAndFiles = context.CompilationProvider.Combine(files.Collect());

            context.RegisterSourceOutput(compilationAndFiles, (productionContext, sourceContext) =>
            {
                foreach (var (name, configXml) in sourceContext.Right)
                {
                    var config = ConfigLoader.GetConfig(configXml);

                    var sb = new StringBuilder();
                    sb.AppendLine("// <auto-generated/>");
                    sb.AppendLine("#nullable enable");
                    sb.AppendLine("using System;");
                    sb.AppendLine("using System.Collections.Generic;");
                    sb.AppendLine();
                    sb.AppendLine("namespace " + config.Namespace + ";");
                    sb.AppendLine();
                    foreach (var node in config.Nodes)
                    {
                        sb.AppendLine("public " + (node.Abstract ? "abstract " : "") + "class " + node.Name + " : " + node.BasedOn);
                        sb.AppendLine("{");
                        WriteConstructor(sb, node);
                        WriteProperties(sb, node);
                        WriteGetChildNodesMethod(config, sb, node);
                        sb.AppendLine("}");
                        sb.AppendLine();
                    }

                    productionContext.AddSource(name + ".g.cs", sb.ToString());
                }
            });     
        }

        private void WriteGetChildNodesMethod(Config config, StringBuilder sb, Node node)
        {
            if (node.Abstract)
                return;
            
            sb.AppendLine("    public override IEnumerable<SyntaxTreeNode> GetChildNodes()");
            sb.AppendLine("    {");
            int count = 0;
            foreach(var prop in node.Properties)
            {
                if (!IsSyntaxTreeNode(config, prop.Type))
                    continue;

                var padding = "        ";
                if (prop.IsList)
                {
                    sb.AppendLine(padding + "foreach (var entry in " + prop.Name + ")");
                    padding += "    ";
                }

                if (prop.Type.EndsWith("?"))
                {
                    sb.AppendLine(padding + "if (" + prop.Name + " != null)");
                    padding += "    ";
                    
                }

                sb.AppendLine(padding + "yield return " + (prop.IsList ? "entry" : prop.Name) + ";");
                count++;
            }

            if (count == 0)
                sb.AppendLine("        yield break;");

            sb.AppendLine("    }");
        }

        private void WriteProperties(StringBuilder sb, Node node)
        {
            if (node.Properties.Length == 0)
                return;

            foreach (var prop in node.Properties)
                sb.AppendLine("    public " + GetRealType(prop) + " " + prop.Name + " { get; set; }");
            sb.AppendLine();
        }

        private void WriteConstructor(StringBuilder sb, Node node)
        {
            if (node.Properties.Length == 0)
                return;

            sb.AppendLine("    public " + node.Name + "(" + GetConstructorArguments(node) + ")");
            sb.AppendLine("    {");
            foreach (var prop in node.Properties)
            {
                sb.AppendLine("        " + prop.Name + " = " + ToLower(prop.Name) + ";");
            }
            sb.AppendLine("    }");
            sb.AppendLine();
        }

        private string GetConstructorArguments(Node node)
        {
            return string.Join(", ", node.Properties.Select(x => GetRealType(x) + " " + ToLower(x.Name)));
        }

        private string GetRealType(NodeProperty property)
        {
            if (property.IsList)
                return $"List<{property.Type}>";
            return property.Type;
        }

        private string ToLower(string value)
        {
            return value.Substring(0, 1).ToLowerInvariant() + value.Substring(1);
        }

        private bool IsSyntaxTreeNode(Config config, string nodeName)
        {
            if (nodeName.EndsWith("?"))
                nodeName = nodeName.Substring(0, nodeName.Length - 1);

            if (nodeName == "SyntaxTreeNode")
                return true;

            var node = config
                .Nodes
                .FirstOrDefault(x => x.Name == nodeName);

            if (node == null)
                return false;

            if (IsSyntaxTreeNode(config, node.BasedOn))
                return true;

            return false;
        }
    }
}

namespace System.Runtime.CompilerServices
{
    internal static class IsExternalInit { }
}
